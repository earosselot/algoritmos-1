Ejercicio 1.

Problema: sumar los elementos de un arreglo.

Especificacion:
  proc sumar(in s: seq ⟨ℤ⟩, out result: ℤ) {
    pre {true}
    post {result = (∑ j = 0, |s|-1,)(s[j])} 
  };

Implementacion:
  result := 0;
  i := 0;
  while (i < s.size()) do {
    result := result + s[i];
    i := i + 1;
  }

Invariante del ciclo:
  I ≡ 0<=i<=|s| ∧L result = (∑ j = 0, i-1)(s[j])

a) Escribir la precondicion y la postcondicion del ciclo.

  Precondicion del ciclo:
    Pc ≡ { result = 0 ∧ i = 0 }
  Postcondicion del ciclo:
    Qc ≡ { result = (∑ j = 0, |s|-1,)(s[j]) }

e) Demostrar formalmente la correccion parcial del ciclo, usando los primeros puntos del teorema del
    invariante.
    
  2) Demostracion torema invariante

  1. Pc ⟹ I
  2. {I ∧ B} S {I}
  3. I ∧ ¬B ⟹ Qc
  4. {I ∧ B ∧ v₀ = fv} S {fv < v₀}
  5. I ∧ fv ≤ 0 ⟹ ¬B
  6. {P} while B do S endwhile {Qc}

    1. Pc ⟹ I
      0<=i<=|s| es valido porque i=0
      si i=0 entonces (∑ j=0, i-1)(s[j]) ≡ (∑ j=0, 0)(s[j]) = 0
      y result=0, por lo tanto el la Pc implica a I.
    
    2. {I ∧ B} S {I}
      {I ∧ B} ⟹ wp(S, I)  // por definicion de la tripla de Hoare
      claculo wp(S, I)
      wp(result := result + s[i]; i := i + 1, 0<=i<=|s| ∧L result = (∑ j=0, i-1)(s[j]) )
      // Axioma3
      ≡ wp(result := result + s[i], wp(i := i + 1, 0<=i<=|s| ∧L result = (∑ j=0, i-1)(s[j])))
      // Axioma1
      ≡ wp(result := result + s[i], def(i+1) ∧L  0<=i + 1<=|s| ∧L result = (∑ j=0, i+1-1)(s[j]))
      // Axioma1
      ≡ def(result + s[i]) ∧L  0<=i+1<=|s| ∧L result + s[i] = (∑ j=0, i+1-1)(s[j])
      // def(s[i])
      ≡ 0<=i<|s| ∧L -1<=i<=|s|-1 ∧L result + s[i] = (∑ j=0, i+1-1)(s[j])
      // simplifico los dos primeros terminos
      ≡ 0<=i<|s| ∧L result + s[i] = (∑ j=0, i)(s[j])
      // paso s[i] restando
      ≡ 0<=i<|s| ∧L result = (∑ j=0, i)(s[j]) - s[i]
      // definicion de sumatoria
      ≡ 0<=i<|s| ∧L result = (∑ j=0, i-1)(s[j])

      I ≡ 0<=i<=|s| ∧L result = (∑ j=0, i-1)(s[j])
      B ≡ i < |s|

      I ∧ B ≡ 0<=i<|s| ∧L result = (∑ j=0, i-1)(s[j])

      {I ∧ B} es exactamente wp(S, I), la implicacion es trivial.

    3. I ∧ ¬B ⟹ Qc
      I ≡ 0<=i<=|s| ∧L result = (∑ j=0, i-1)(s[j])
      ¬B ≡ i >= |s|

      I ∧ ¬B ≡ i=|s| ∧L result = (∑ j=0, i-1)(s[j])

      si i+|s| entoces result = (∑ j=0, |s|-1)(s[j])
      la implicacion es trivial, ya que los terminos son iguales.

  b) Que punto falla en la demostracion si el primer termino de I se reemplaza por 0<=i<s ?
    Falla el punto 3. porque I y ¬B darian false. (0<=i<|s| ∧ i>=|s| ≡ false)
  
  c) Que punto de la demostracion falla si el limite superior de la sumatoria (i-1) se reemplaza por i?
    Falla el punto 2, en la parte donde se pasa el s[i] restando, ya no se podria aplicar la regla de
      la sumatoria, porque quedaria (∑ j=0, i+1)(s[j]) - s[i] ≡ (∑ j=0, i-1)(s[j]) - s[i+1].
    Luego no podriamos probar que I ∧ B ⟹ Q.
  
  e) Proponer una funcion variante y demostrar formalmente la terminacion del ciclo, utilizando la 
       funcion variante.
  
    fv ≡ |s| - i
    
    4. {I ∧ B ∧ v₀ = fv} S {fv < v₀}  // La funcion variante decrece
      wp(S1; S2, fv < v₀)
      // Axioma 3
      ≡ wp(S1, wp(S2, fv < v₀))
      // reemplazo S2 y fv
      ≡ wp(S1, wp(i := i + 1, |s| - i < v₀))
      // Axioma 1
      ≡ wp(S1, def(i+1) ∧L |s| - (i+1) < v₀))
      // def(i+1) = true - reemplazo S1
      ≡ wp(result := result + s[i], |s| - (i+1) < v₀))
      // Axioma 1
      ≡ def(result + s[i]) ∧L |s| - (i+1) < v₀
      // def(s[i])
      ≡ 0<=i<|s| ∧L |s| - i - 1 < v₀

      Puedo usar {I ∧ B ∧ v₀ = fv}:
        1. 0<=i<=|s|
        2. result = (∑ j=0, i-1)(s[j])
        3. i < |s|
        4. v₀ = |s| - i
          // resto uno en ambos terminos para obtener algo similar a lo que quiero probar
          v₀ - 1  = |s| - i - 1
          // v₀ - 1 es menor estricto que v₀
          v₀ - 1 < v₀  ⟹ |s| - i - 1 < v₀

      Quiero probar wp(S1; S2, fv<v₀):
        1. 0<=i<|s| Vale por 0<=i<=|s| y i < |s|
        2. |s| - i - 1 < v₀ Vale por v₀ = |s| - i

    5. I ∧ fv ≤ 0 ⟹ ¬B
      Utilizando { I ∧ fv<=0 }:
        I ≡ 0<=i<=|s| ∧L result = (∑ j=0, i-1)(s[j])
        fv <= 0 ≡ |s| - i <= 0 ≡ |s| <= i
      Quiero demostrar ¬B:
        ¬B ≡ i >= |s| Vale, por fv<=0


//-----------------------------------------------------------------//
//-----------------------------------------------------------------//
//-----------------------------------------------------------------//

Ejercicio 2.

proc sumarParesHastaN((in n : ℤ, out result: ℤ) {
  pre {n ≥ 0}
  post {result = (∑ j=0 n-1)(if j mod 2 = 0 then j else 0 fi)}
};

//Implementacion
result := 0;
i := 0;
while (i < n) do
  result := result + i;
  i := i + 2;
endwhile;

// Invariante

I ≡ 0 ≤ i ≤ n+1 ∧ i mod 2 = 0 ∧ result = (∑ j=0 i-1)(if j mod 2 = 0 then j else 0 fi)

// Calcular pre y postcondicion del ciclo.

Pc ≡ n ≥ 0 ∧ result = 0 ∧ i = 0
Qc ≡ result = (∑ j=0 n-1)(if j mod 2 = 0 then j else 0 fi)
B ≡ i < n

// Demostrar correcion - teorema del invariante

1. Pc ⟹ I
  quiero probar: 
    1. 0 ≤ i ≤ n+1 ≡ 0 ≤ i ∧ i ≤ n+1  ≡(reemplazo i) 0 ≤ 0 ∧ 0 ≤ n+1. Los dos terminos son triviales por Pc
    2. i mod 2 = 0. Es true porque i=0 ∧ 0 mod 2 = 0
    3. result = (∑ j=0 i-1)(if j mod 2 = 0 then j else 0 fi). El resuldado de la sumatoria es 0 y result=0. es true.

2. {I ∧ B} S {I}
  (I ∧ B) ⟹ wp(S, I)

  wp(result := result + i; i := i + 2, 
    0 ≤ i ≤ n+1 ∧ i mod 2 = 0 ∧ result = (∑ j=0 i-1)(if j mod 2 = 0 then j else 0 fi))

  ≡ wp(S1; S2, I)
  // axioma4
  ≡ wp(S1, wp(S2, I))
  
  calculo wp(S2, I) ≡ E1
  ≡ wp(i := i + 2, 0 ≤ i ≤ n+1 ∧ i mod 2 = 0 ∧ result = (∑ j=0 i-1)(if j mod 2 = 0 then j else 0 fi))
  // Axioma 1
  def(i+2) ∧L 0≤i+2≤n+1 ∧ i+2 mod 2 = 0 ∧ result = (∑ j=0 i+1)(if j mod 2 = 0 then j else 0 fi)
  // def(i+2) = true // i+2 mod 2 = 0 eq. i mod 2 = 0
  ≡ 0≤i+2≤n+1 ∧ i mod 2 = 0 ∧ result = (∑ j=0 i+1)(if j mod 2 = 0 then j else 0 fi)

  calculo wp(S1, wp(S2, I)) ≡ wp(S1, E1)
  ≡ wp(result := result + i, E1) 
  // Axioma1
  ≡ def(result+i) ∧L 0≤i+2≤n+1 ∧ i mod 2 = 0 ∧ result + i = (∑ j=0 i+1)(if j mod 2 = 0 then j else 0 fi)
  // def(result+i) = true
  ≡ 0≤i+2≤n+1 ∧ i mod 2 = 0 ∧ result + i = (∑ j=0 i+1)(if j mod 2 = 0 then j else 0 fi)

  tengo I ∧ B:
    1. 0 ≤ i ≤ n+1 
    2. i mod 2 = 0 
    3. result = (∑ j=0 i-1)(if j mod 2 = 0 then j else 0 fi)
    4. i < n
  quiero probar wp(S2, I):
    1. 0≤i+2 // es trivial por (1) 0 ≤ i 
    2. i+2≤n+1 ≡ i ≤ n-1 ≡ i < n // es trivial por (4) i < n
    3. i mod 2 = 0 // es trivial por (2)
    4. result + i = (∑ j=0 i+1)(if j mod 2 = 0 then j else 0 fi)
      ≡ result = (∑ j=0 i+1)(if j mod 2 = 0 then j else 0 fi) - i
      ≡ result = (∑ j=0 i)(if j mod 2 = 0 then j else 0 fi) + (if i+1 mod 2 = 0 then i else 0 fi) - i
      // i+1 mod 2 = 0 es falso por (2) i mod 2 = 0 
      ≡ result = (∑ j=0 i)(if j mod 2 = 0 then j else 0 fi) + 0 - i
      ≡ result = (∑ j=0 i-1)(if j mod 2 = 0 then j else 0 fi) + (if i mod 2 = 0 then i else 0 fi) - i
      // i mod 2 = 0 es true por (2) i mod 2 = 0
      ≡ result = (∑ j=0 i-1)(if j mod 2 = 0 then j else 0 fi) + i - i
      ≡ result = (∑ j=0 i-1)(if j mod 2 = 0 then j else 0 fi) // se implica trivialmente de (3)


3. (I ∧ ¬B) ⟹ Qc
  quiero probar: 
    1. result = (∑ j=0 n-1)(if j mod 2 = 0 then j else 0 fi)
      0 ≤ i ≤ n+1 ∧ i mod 2 = 0 ∧ i ≥ n ∧ result = (∑ j=0 i-1)(if j mod 2 = 0 then j else 0 fi)
      ≡ (i = n ∨ i = n+1) ∧ i mod 2 = 0 ∧ result = (∑ j=0 i-1)(if j mod 2 = 0 then j else 0 fi)
      si i=n   ⟹ result = (∑ j=0 n-1)(if j mod 2 = 0 then j else 0 fi) // que era lo que queria probar
      si i=n+1 ⟹ result = (∑ j=0 n)(if j mod 2 = 0 then j else 0 fi) 
                  ≡ result = (∑ j=0 n-1)(if j mod 2 = 0 then j else 0 fi) + (if n mod 2 = 0 then j else 0 fi) 
                  // como i mod 2 = 0 => i+1 mod 2 = 0 es false
                  ≡ result = (∑ j=0 n-1)(if j mod 2 = 0 then j else 0 fi) + 0
      en cualquiera de los 2 casos I ∧ ¬B implican a Qc.


// Falta segunda parte (terminacion del ciclo)

4. {I ∧ B ∧ v₀ = fv} S {fv < v₀}
5. I ∧ fv ≤ 0 ⟹ ¬B

// propongo una funcion variante
fv = n - i

4. {I ∧ B ∧ v₀ = fv} S {fv < v₀}
   // por definicion de tripla de Hoare
   {I ∧ B ∧ v₀ = fv} ⟹ wp(S, fv < v₀) ??

  calculo wp(S, fv < v₀)
  wp(S1, wp(S2, fv < v₀))

  calculo E1 ≡ wp(S2, fv < v₀)
  ≡ wp(i := i + 2, n-(i+2) < v₀)
  // Axioma1
  ≡ def(i+2) ∧L n-(i+2) < v₀
  // asuimos que las variables estan siempre definidas.
  ≡ n-(i+2) < v₀

  reemplazo E1 y S1:
  wp(result := result + i, n-(i+2) < v₀)
  // Axioma 1
  ≡ def(result+i) ∧L n-(i+2) < v₀ 
  // asumimos que las variables estan siempre definidas
  ≡ n-(i+2) < v₀ 

  tengo {I ∧ B ∧ v₀ = fv}:
    1. 0 ≤ i ≤ n+1 
    2. i mod 2 = 0 
    3. result = (∑ j=0 i-1)(if j mod 2 = 0 then j else 0 fi)
    4. i < n
    5. v₀ = n - i
  quiero ver que:
    1. n-(i+2) < v₀ 
    // reemplazando con (5)
       ≡ n-(i+2) < n-i


5. I ∧ fv ≤ 0 ⟹ ¬B
  tengo I ∧ fv ≤ 0:
    1. 0 ≤ i ≤ n+1 
    2. i mod 2 = 0 
    3. result = (∑ j=0 i-1)(if j mod 2 = 0 then j else 0 fi)
    4. n-i ≤ 0
  quiero probar ¬B:
    1. i ≥ n 
    // de (4) n-i ≤ 0 ≡ n ≤ i que era lo que queria probar

Fin de la prueba

//-----------------------------------------------------------------//
//-----------------------------------------------------------------//
//-------------------------Ejercicio 4-----------------------------//
//-----------------------------------------------------------------//
//-----------------------------------------------------------------//

proc sumaDivisores(in n: ℤ, out result: ℤ) {
  pre { n ≥ 1 }
  post { result = (∑ j=0 n)(if n mod j = 0 then j else 0 fi) }
}

// a) escribir un programa en SmallLang que satisfaga la especificacion y contenga
//    exactamente un ciclo

i := 1;
sumaDivisores := 0;
while (i ≤ n) do
  if (n mod i = 0)
    sumaDivisores := sumaDivisores + i;
  else
    skip;
  endif
endwhile;

// b) El ciclo propuesto, puede ser demostrado mediante el siguiente invariante?

I ≡ 1 ≤ i ≤ n ∧ result = (∑ j=1 i)(if n mod j = 0 then j else 0 fi)

el rango de i no va a valer cuando se temrmine la ultima iteracion, i=n+1:
I ≡ 1 ≤ i ≤ n+1 ∧ result = (∑ j=1 i)(if n mod j = 0 then j else 0 fi)

cuando entra en la primera iteracion i=1 y result=0, pero la sumatoria da 1.
hay que achicar el rango para que valga antes de la primera y despues de la ultima
iteracion:
I ≡ 1 ≤ i ≤ n+1 ∧ result = (∑ j=1 i-1)(if n mod j = 0 then j else 0 fi)


//-----------------------------------------------------------------//
//-----------------------------------------------------------------//
//--------------------------Ejercicio 7----------------------------//
//-----------------------------------------------------------------//
//-----------------------------------------------------------------//

Resuelto en clase con Tomas.

Pre { |s|=r ∧ r=r0 }
Post { |s|=|r| ∧L (∀j:ℤ)(0≤j<|s| ⟹L s[j]=r[j]) }

i:=0;
while (i < |s|) do
  r[i]:=s[i];
  i:=i+1;
endwhile

7.a) Escribir la precondicion del ciclo (Pc) y la postcondicion del ciclo (Qc).

Pc ≡ todo lo que sabemos hasta el momento en que empieza el ciclo.
Pc ≡ la Pre y las instrucciones antes del ciclo 
            (a no ser que las instrucciones modifiquen la Pre, en ese caso hay
              que tener cuidado)
el r0 esta medio al pedo en este ejercicio, la ponemos por las dudas...

Pc ≡ |s|=r ∧ r=r0 ∧ i=0


Qc ≡ que hace falta tener cuando termina el ciclo para que se cumpla la Post.
en este caso no hay instrucciones despues del ciclo, entonces es solo la Post.
Si hay cosas, es wp(S2, Post).

Qc ≡ |s|=|r| ∧L (∀j:ℤ)(0≤j<|s| ⟹L s[j]=r[j])

7.b) Proponer un invariante y demostrar que el ciclo es parcialmente correcto.
queremos ver que(qvq):
  1. Pc ⟹ I
  2. {I ∧ B} S {I}
  3. I y ¬B ⟹ Qc

I ≡ variable del ciclo ∧ estado intermedio de la solucion.
I ≡ (0≤i≤|s| ∧ |s|=|r|) ∧L (∀j:ℤ)(0≤j<i ⟹L s[j]=r[j])
el primer termino llava un menor-igual que |s| porque el inveriante tiene que valer cuando
termina el ciclo.

  1. Pc ⟹ I
    |s|=r ∧ r=r0 ∧ i=0 ⟹ (0≤i≤|s| ∧ |s|=|r|) ∧L (∀j:ℤ)(0≤j<i ⟹L s[j]=r[j])
      Suponiendo Pc:
        (0≤i≤|s| ∧ |s|=|r|) vale porque i=0 (y claramente |s|≥0)
        (∀j:ℤ)(0≤j<i ⟹L s[j]=r[j]) vale porque 0≤j<i es siempre False para i=0, entonces siempre es True.
      Entonces, se cumple 1.
  
  2. {I ∧ B} S {I}
    (I ∧ B) ⟹ wp(S, I) (por definicion de tripla de Hoare)
    wp(r[i]:=s[i]; i:=i+1, (0≤i≤|s| ∧ |s|=|r|) ∧L (∀j:ℤ)(0≤j<i ⟹L s[j]=r[j]))
    // Ax.3
    wp(r[i]:=s[i], wp(i:=i+1, (0≤i≤|s| ∧ |s|=|r|) ∧L (∀j:ℤ)(0≤j<i ⟹L s[j]=r[j])))
    // Ax.1
    wp(r[i]:=s[i], def(i+1) ∧L (0≤i+1≤|s| ∧ |s|=|r|) ∧L (∀j:ℤ)(0≤j<i+1 ⟹L s[j]=r[j]))  
    // def = true        
    wp(r[i]:=s[i], (0≤i+1≤|s| ∧ |s|=|r|) ∧L (∀j:ℤ)(0≤j<i+1 ⟹L s[j]=r[j]))  
    // transformacion a setAt
    wp(r:=setAt(r,i,s[i]), (0≤i+1≤|s| ∧ |s|=|r|) ∧L (∀j:ℤ)(0≤j<i+1 ⟹L s[j]=r[j])) 
    // Ax.1 el |r| no lo reemplazo porque da igual
    def(setAt(r,i,s[i])) ∧L (0≤i+1≤|s| ∧ |s|=|r|) ∧L (∀j:ℤ)(0≤j<i+1 ⟹L s[j] = setAt(r,i,s[i])[j] )
    // def
    0≤i<|s| ∧ 0≤i<|r| ∧L (0≤i+1≤|s| ∧ |s|=|r|) ∧L (∀j:ℤ)(0≤j<i+1 ⟹L s[j] = setAt(r,i,s[i])[j] ) 
    // extraigo el caso j=i del para todo 
    0≤i<|s| ∧ 0≤i<|r| ∧L (0≤i+1≤|s| ∧ |s|=|r|) ∧L
      (∀j:ℤ)(0≤j<i+1 ⟹L s[j] = setAt(r,i,s[i])[j]) ∧ 
      s[i] = setAt(r,i,s[i])[i]  
    // aplico los reemplazos de setAt cuando j=1 y j!=i
    0≤i<|s| ∧ 0≤i<|r| ∧L (0≤i+1≤|s| ∧ |s|=|r|) ∧L
      (∀j:ℤ)(0≤j<i ⟹L s[j] = r[j]) ∧ 
      s[i] = s[i] (true)
    // 
    0≤i<|s| ∧ 0≤i<|r| ∧L (0≤i+1≤|s| ∧ |s|=|r|) ∧L
      (∀j:ℤ)(0≤j<i ⟹L s[j] = r[j])     
      
    // Pasos extra
    (0≤i<|s| ∧ |s|=|r| ) ∧L (∀j:ℤ)(0≤j<i ⟹L s[j] = r[j]) 
    
    I ≡ (0≤i≤|s| ∧ |s|=|r|) ∧L (∀j:ℤ)(0≤j<i ⟹L s[j]=r[j])
    B ≡ i < |s|

    Veamos que I y B implica wp
    0≤i<|s| vale por 0<=i<=|s| en Invariante y i<|s| en B
    |s|=|r| vale por |s|=|r| en I
    (∀j:ℤ)(0≤j<i ⟹L s[j] = r[j]) vale porque esta en I sintacticamente igual.
  
  3. I y ¬B ⟹ Qc

  Qc ≡ |s|=|r| ∧L (∀j:ℤ)(0≤j<|s| ⟹L s[j]=r[j])

  I ≡ (0≤i≤|s| ∧ |s|=|r|) ∧L (∀j:ℤ)(0≤j<i ⟹L s[j]=r[j])
  ¬B ≡ i ≥ |s|

  |s|=|r| vale por |s|=|r| en el Invariante.
  (∀j:ℤ)(0≤j<|s| ⟹L s[j]=r[j]) vale porque (i ≥ |s| ∧ i≤|s|) implica i=|s|
      entonces es igual a (∀j:ℤ)(0≤j<i ⟹L s[j]=r[j]).
  El termino del para todo, es muuuy parecido pero sin i=|s|


7.c) Proponer una funcion variante que permita demostrar que el ciclo termina.

---- Desde aca copie y pegue la solucion porque me tuve que ir ---
Encontrar fv:
	¬B ≡ ¬(i < |s|) ≡ i >= |s|

	quiero fv <= 0  =>  i >= |s|
	Si consigo fv <= 0  ≡  i >= |s|
	
	i >= |s| ≡
	|s| <= i ≡
	|s|-i <= 0
	
	--> fv = |s|-i	

	
4. {I ∧ B ∧ fv = v_0 } cuerpoCiclo {fv < v_0 }
	
	wp(cuerpoCiclo, |s|-i < v_0) ≡
	wp((r[i] := s[i]; i := i+1), |s|-i < v_0) ≡ (Ax3)
	wp(r[i] := s[i], wp(i := i+1, |s|-i < v_0)) ≡
	wp(r[i] := s[i], def(i+1) ^L reemp(i,i+1,|s|-i < v_0)) ≡
	wp(r[i] := s[i], |s|-(i+1) < v_0) ≡ (Ax3)
	wp(r[i] := s[i], |s|-(i+1) < v_0) ≡
	wp(r := setAt(r,i,s[i]), |s|-(i+1) < v_0) ≡ 
	def(setAt(r,i,s[i])) ^L |s|-(i+1) < v_0 ≡
	0 <= i < |s| ^L 0 <= i < |r| ^L |s|-(i+1) < v_0 ≡
	
	qvq I ∧ B ∧ fv = v_0 implica lo de arriba
	
	Sabemos:
		I ≡ (0 <= i <= |s| ^ |s| = |r|) ^L (∀j :Z)(0 ≤ j < i →L s[j] = r[j])	
		B ≡ i < |s|
		|s|-i = v_0
	Entonces:
		0 <= i < |s| vale por i < |s| en B y 0 <= i <= |s| en I
		0 <= i < |r| vale por |s| = |r| y lo anterior
		|s|-(i+1) < v_0 ≡ |s|-i -1 < v_0 ≡ v_0 - 1 < v_0 ≡ True

5. I ∧ fv ≤ 0 => ¬B
	
	fv <= 0 ≡ |s|-i <= 0 ≡ |s| <= i ≡ i >= |s| ≡ ¬B  listo!

---- Hasta aca copie y pegue la solucion porque me tuve que ir ---


//-----------------------------------------------------------------//
//-----------------------------------------------------------------//
//---------------------------Ejercicio 9---------------------------//
//-----------------------------------------------------------------//
//-----------------------------------------------------------------//

i := s.size() - 1;
suma := 0;

while (i >= length(s) / 2) do
  // suma va sumando desde el primer elemento
  suma := suma + s[length(s)-1-i];
  // i arranca desde el ultimo elemento y corta despues de pasar la mitad.
  i := i-1;
endwhile

Pc ≡ {|s| mod 2 = 0 ∧ i = |s| - 1 ∧ suma = 0 }
Qc ≡ {|s| mod 2 = 0 ∧ i = |s| / 2 - 1 ∧L suma = (⅀ j=0, (|s|/2)-1)(s[j])}

// a) Especificar un invariante de ciclo que permita demostrar que el ciclo cumple la 
// postcondicion.

I ≡ (|s|/2)-1 ≤ i ≤ |s|-1 ∧ |s| mod 2 = 0 ∧ suma = (∑ j=0 |s|-2-i)(s[j])

con suma = (∑ j=0 |s|-1-i)(s[j]),
  antes de la primer iteracion:
    i=|s|-1 ⟹ suma = (∑ j=0 |s|-1-(|s|-1))(s[j]) = (∑ j=0 |s|-1-|s|+1)(s[j]) = (∑ j=0 0)(s[j]) = s[0]
    -> no funciona

con suma = (∑ j=0 |s|-2-i)(s[j]),
  antes de la primer iteracion:
    i=|s|-1 ⟹ suma = (∑ j=0 |s|-2-(|s|-1))(s[j]) = (∑ j=0 |s|-2-|s|+1)(s[j]) = (∑ j=0 -1)(s[j]) = 0 // funciona
  despues de la primer iteracion:
    suma = s[0] ∧ i = |s|-2 ⟹
    suma = (∑ j=0 |s|-2-(|s|-2))(s[j]) = (∑ j=0 |s|-2-|s|+2)(s[j]) =(∑ j=0 0)(s[j]) = s[0] // funciona

// b) Especificar una funcion variante para demostrar que el ciclo termina.

 B ≡ i ≥ |s| / 2
¬B ≡ i < |s| / 2

fv ≡ i - |s|/2 + 1
fv₀ ≡ |s| - |s|/2 + 1 = |s|/2 + 1 
fv[ultimoPreciclo]  ≡ |s|/2     - |s|/2 + 1 = 1
fv[ultimoPostCiclo] ≡ |s|/2 - 1 - |s|/2 + 1 = 0


// c) Demostrar formalmente la correccion y terminacion del ciclo usando el TdI.

1. Pc ⟹ I
  tengo Pc:
    1. |s| mod 2 = 0
    2. i = |s|-1
    3. suma = 0
  qvq I:
    1. (|s|/2)-1 ≤ i ≤ |s|-1 ≡ (|s|/2)-1 ≤ i ∧ i ≤ |s|-1 
    // reemplazo i segun (2)
    ≡ (|s|/2)-1 ≤ |s|-1 ∧ |s|-1 ≤ |s|-1 // ambas son trivialmente true
    2. |s| mod 2 = 0 // es trivial por (1)
    3. suma = (∑ j=0 |s|-2-i)(s[j]) // reemplazo i con (2)
      ≡ suma = (∑ j=0 |s|-2-(|s|-1))(s[j]) = (∑ j=0 |s|-2-|s|+1)(s[j]) = (∑ j=0 -1)(s[j]) = 0 = suma 
      // es trivial por (3)

2. {I ∧ B} S {I}

  {I ∧ B} ⟹ wp(S, I)
  
  // Axioma3
  wp(S1, wp(S2, I)) ≡ wp(S1, E1) ≡ E2

  calculo E1
  wp(i := i-1, (|s|/2)-1 ≤ i ≤ |s|-1 ∧ |s| mod 2 = 0 ∧ suma = (∑ j=0 |s|-2-i)(s[j]))
  // Axioma1
  ≡ def(i-1) ∧L (|s|/2)-1 ≤ i-1 ≤ |s|-1 ∧ |s| mod 2 = 0 ∧ suma = (∑ j=0 |s|-2-(i-1))(s[j])
  // 1 esta def y las variables las asumimos definidas // sumo 1 a todos los terminos del rango de i // resuelvo rango de sumatoria
  ≡ (|s|/2) ≤ i ≤ |s| ∧ |s| mod 2 = 0 ∧ suma = (∑ j=0 |s|-1-i)(s[j])

  reemplazo E1 en E2
  E2 ≡ wp(suma := suma + s[|s|-1-i], (|s|/2) ≤ i ≤ |s| ∧ |s| mod 2 = 0 ∧ suma = (∑ j=0 |s|-1-i)(s[j]))
  // Axioma 1
  ≡ def(suma + s[|s|-1-i]) ∧L (|s|/2) ≤ i ≤ |s| ∧ |s| mod 2 = 0 ∧ suma + s[|s|-1-i] = (∑ j=0 |s|-1-i)(s[j]))
  // resuelvo el def
  ≡ 0 ≤ |s|-1-i < |s| ∧L (|s|/2)≤i≤|s| ∧ |s| mod 2 = 0 ∧ suma + s[|s|-1-i] = (∑ j=0 |s|-1-i)(s[j]))
  // pasaje de terminos en el primer termino y multiplicacion por -1
  ≡ 0 ≤ i ≤ |s|-1 ∧L (|s|/2)≤i≤|s| ∧ |s| mod 2 = 0 ∧ suma + s[|s|-1-i] = (∑ j=0 |s|-1-i)(s[j]))
  // entre los primeros dos terminos queda
  ≡ (|s|/2)≤i≤|s|-1 ∧ |s| mod 2 = 0 ∧ suma + s[|s|-1-i] = (∑ j=0 |s|-1-i)(s[j]))
  // extraigo el ultimo termino de la sumatoria y paso restando el s[...]
  ≡ (|s|/2)≤i≤|s|-1 ∧ |s| mod 2 = 0 ∧ suma  = (∑ j=0 |s|-2-i)(s[j])) + s[|s|-1-i] - s[|s|-1-i]
  ≡ (|s|/2)≤i≤|s|-1 ∧ |s| mod 2 = 0 ∧ suma  = (∑ j=0 |s|-2-i)(s[j]))
  
  tengo {I ∧ B}:
    1. (|s|/2)-1 ≤ i ≤ |s|-1 
    2. |s| mod 2 = 0 
    3. suma = (∑ j=0 |s|-2-i)(s[j])
    4. i ≥ |s|/2
  qvq wp(S, I):
    1. (|s|/2) ≤ i ≤ |s|-1 // la primera desigualdad se implica de (4) y la segunda de (1)
    2. |s| mod 2 = 0 // equivalente a (2)
    3. suma  = (∑ j=0 |s|-2-i)(s[j])) // equivalente a (3)
            
3. I ∧ ¬B ⟹ Qc
  tengo I ∧ ¬B:
    1. (|s|/2)-1 ≤ i ≤ |s|-1 
    2. |s| mod 2 = 0 
    3. suma = (∑ j=0 |s|-2-i)(s[j])
    4. i < |s|/2 
  qvq Qc:
    1. |s| mod 2 = 0 // es trivial por (2)
    2. i = (|s|/2)-1 
    // (4) i < |s|/2 ∧ (1) (|s|/2)-1 ≤ i
    // (4) i ≤ (|s|/2)-1 ∧ (1) (|s|/2)-1 ≤ i
    // (|s|/2)-1 ≤ i ≤ (|s|/2)-1 ⟹ i = (|s|/2)-1 que era lo que queria probar
    3. suma = (⅀ j=0, (|s|/2)-1)(s[j])
    // reemplazo en (3) i = (|s|/2)-1 (1 y 4)
    // suma = (∑ j=0 |s|-2-((|s|/2)-1))(s[j]) = (∑ j=0 |s|-2-(|s|/2)+1)(s[j]) = (∑ j=0 (|s|/2)-1)(s[j]) que era lo que queria probar

4. {I ∧ B ∧ v₀ = fv} S {fv < v₀}
  quiero ver que {I ∧ B ∧ v₀ = fv} ⟹ wp(S, fv < v₀)

  calculo wp(S, fv < v₀) ≡ wp(S1; S2, fv < v₀)
  // Axioma 3
  ≡ wp(S1, wp(S2, fv < v₀)) ≡ wp(S1, E1)

  calculo E1
  wp(S2, fv < v₀)
  ≡ wp(i := i-1, i - |s|/2 + 1 < v₀)
  // Axioma 1
  ≡ def(i-1) ∧L i - 1 - |s|/2 + 1 < v₀
  // asumimos que las variables estan definidas, las constantes estan definidas
  ≡ i - |s|/2 < v₀

  tengo {I ∧ B ∧ v₀ = fv}:
    1. (|s|/2)-1 ≤ i ≤ |s|-1 
    2. |s| mod 2 = 0 
    3. suma = (∑ j=0 |s|-2-i)(s[j])    
    4. i ≥ |s| / 2
    5. v₀ = i - |s|/2 + 1
  qvq wp(S, fv < v₀):
    1. i - |s|/2 < v₀ // reemplazo con (5)
       i - |s|/2 < i - |s|/2 + 1 
       0 < 1 // es true

5. I ∧ fv ≤ 0 ⟹ ¬B
  tengo I ∧ fv ≤ 0:
    1. (|s|/2)-1 ≤ i ≤ |s|-1 
    2. |s| mod 2 = 0 
    3. suma = (∑ j=0 |s|-2-i)(s[j]) 
    4. i - |s|/2 + 1 ≤ 0   
  qvq ¬B:
    1. i < |s|/2 // arreglando (4) i ≤ |s|/2 - 1 ≡ i < |s|/2 que era lo que queria probar
  
//-----------------------------------------------------------------//
//-----------------------------------------------------------------//
//---------------------------Ejercicio 10--------------------------//
//-----------------------------------------------------------------//
//-----------------------------------------------------------------//


proc reemplazarTodos(inout:seq〈ℤ〉,in a: ℤ,in b: ℤ){
  Pre{s=S0}
  Post{|s|=|S0| ∧L
    (∀j:Z)((0≤j<|s| ∧L S₀[j] = a) ⟹L s[j] = b ) ∧ 
    (∀j:Z)((0≤j<|s| ∧L S₀[j] ≠ a) ⟹L s[j] = S₀[j] )}
}

a)
i := 0;
while i < s.size() do
  if s[i] == a      // Sif  B = s[i] == a
    s[i] = b;       // S1
  else 
    skip            // S2
  endif 
  i := i + 1;       // S3
endwhile;

b)
Pc ≡ i=0 ∧ s=S₀
Qc ≡ |s|=|S0| ∧L
        (∀j:Z)((0≤j<|s| ∧L S₀[j] = a) ⟹L s[j] = b ) ∧ 
        (∀j:Z)((0≤j<|s| ∧L S₀[j] ≠ a) ⟹L s[j] = S₀[j])

c)
I ≡ 0≤i≤|s| ∧ |s|=|S0| ∧L
        (∀j:Z)((0≤j<i ∧L S₀[j] = a) ⟹L s[j] = b ) ∧ 
        (∀j:Z)((0≤j<i ∧L S₀[j] ≠ a) ⟹L s[j] = S₀[j])

1. Pc ⟹ I
2. {I ∧ B} S {I}
3. I ∧ ¬B ⟹ Qc
4. {I ∧ B ∧ v₀ = fv} S {fv < v₀}
5. I ∧ fv ≤ 0 ⟹ ¬B
6. {Pc} while B do S endwhile {Qc}

1. Pc ⟹ I

  quiero probar el invariante:
    0≤i≤|s| es valido porque i=0
    |s|=|S0| es valido por s=S₀
    (∀j:Z)((0≤j<i ∧L S₀[j] = a) ⟹L s[j] = b ) como i=0
      ≡ (∀j:Z)((0≤j<0 ∧L S₀[j] = a) ⟹L s[j] = b ) ≡ true
    (∀j:Z)((0≤j<i ∧L S₀[j] ≠ a) ⟹L s[j] = S₀[j]) como i=0
      (∀j:Z)((0≤j<0 ∧L S₀[j] ≠ a) ⟹L s[j] = S₀[j]) ≡ true

  se cumple que Pc implica al I

2. {I ∧ B} S {I}

  wp(S, I) 
  ≡  wp(Sif;S3, I)) 
  // Axioma 3 
  ≡ wp(Sif, wp (S3, I)) 
  // Axioma 4
  ≡ def(B) ∧L ((B ∧ wp(S1, wp(S3, I))) ∨ (¬B ∧ wp(S2, wp(S3, I)))

  calculo wp(S3, I)
  ≡ wp(i := i + 1, 0≤i≤|s| ∧ |s|=|S0| ∧L
      (∀j:Z)((0≤j<i ∧L S₀[j] = a) ⟹L s[j] = b ) ∧ 
      (∀j:Z)((0≤j<i ∧L S₀[j] ≠ a) ⟹L s[j] = S₀[j]))
  // Axioma 1
  ≡ def(i+1) ∧L 0≤i+1≤|s| ∧ |s|=|S0| ∧L
      (∀j:Z)((0≤j<i+1 ∧L S₀[j] = a) ⟹L s[j] = b ) ∧ 
      (∀j:Z)((0≤j<i+1 ∧L S₀[j] ≠ a) ⟹L s[j] = S₀[j])
  // def = true
  ≡ 0≤i+1≤|s| ∧ |s|=|S0| ∧L
      (∀j:Z)((0≤j<i+1 ∧L S₀[j] = a) ⟹L s[j] = b ) ∧ 
      (∀j:Z)((0≤j<i+1 ∧L S₀[j] ≠ a) ⟹L s[j] = S₀[j])

  calculo wp(S1, wp(S3, I))
  ≡ wp(s[i] = b, 0≤i+1≤|s| ∧ |s|=|S0| ∧L
      (∀j:Z)((0≤j<i+1 ∧L S₀[j] = a) ⟹L s[j] = b ) ∧ 
      (∀j:Z)((0≤j<i+1 ∧L S₀[j] ≠ a) ⟹L s[j] = S₀[j]))
  // convierto a setAt
  ≡ wp(s := setAt(s, i, b), 0≤i+1≤|s| ∧ |s|=|S0| ∧L
    (∀j:Z)((0≤j<i+1 ∧L S₀[j] = a) ⟹L s[j] = b ) ∧ 
    (∀j:Z)((0≤j<i+1 ∧L S₀[j] ≠ a) ⟹L s[j] = S₀[j]))  
  // Axioma 1
  ≡ def(setAt(s, i, b)) ∧L 0≤i+1≤|setAt(s, i, b)| ∧ |setAt(s, i, b)|=|S0| ∧L
    (∀j:Z)((0≤j<i+1 ∧L S₀[j] = a) ⟹L setAt(s, i, b)[j] = b ) ∧ 
    (∀j:Z)((0≤j<i+1 ∧L S₀[j] ≠ a) ⟹L setAt(s, i, b)[j] = S₀[j])
  // def y |setAt(s, i, b)|=|s|
  ≡ 0≤i<|s| ∧L 0≤i+1≤|s| ∧ |s|=|S0| ∧L
    (∀j:Z)((0≤j<i+1 ∧L S₀[j] = a) ⟹L setAt(s, i, b)[j] = b ) ∧ 
    (∀j:Z)((0≤j<i+1 ∧L S₀[j] ≠ a) ⟹L setAt(s, i, b)[j] = S₀[j])
  // separo caso i=j
  ≡ 0≤i<|s| ∧L 0≤i+1≤|s| ∧ |s|=|S0| ∧L
    (∀j:Z)((0≤j<i+1 ∧L S₀[j] = a) ⟹L setAt(s, i, b)[j] = b ) ∧ (S₀[i] = a ⟹L setAt(s, i, b)[i] = b)
    (∀j:Z)((0≤j<i+1 ∧L S₀[j] ≠ a) ⟹L setAt(s, i, b)[j] = S₀[j]) ∧ (S₀[i] ≠ a ⟹L setAt(s, i, b)[i] = S₀[i])
  // simplifico setAt
  ≡ 0≤i<|s| ∧L 0≤i+1≤|s| ∧ |s|=|S0| ∧L
    (∀j:Z)((0≤j<i+1 ∧L S₀[j] = a) ⟹L s[j] = b ) ∧ (S₀[i] = a ⟹L b = b)
    (∀j:Z)((0≤j<i+1 ∧L S₀[j] ≠ a) ⟹L s[j] = S₀[j]) ∧ (S₀[i] ≠ a ⟹L b[i] = S₀[i])


3. I ∧ ¬B ⟹ Qc


