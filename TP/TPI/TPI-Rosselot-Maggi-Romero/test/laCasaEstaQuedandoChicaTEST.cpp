#include "../definiciones.h"
#include "../Funciones_TPI.h"
#include "../ejercicios.h"
#include "gtest/gtest.h"
#include <iostream>
#include <string>
#include <math.h>

using namespace std;

#define UMBRAL 0.0001

// Caso de división por cero que sea igual a 0
TEST(laCasaEstaQuedandoChicaTEST, hacinamientoCriticoTodosIgualAUno) {

//                                            Región\ +500 /Tipo // Dormitorios
//                                                   v  v  v     v
    eph_h th = {{22114, 2020, 3, 319611, 629088, 3, 1,  0, 1, 3, 1, 2},
                {22866, 2020, 3, 317157, 627217, 2, 40, 0, 1, 2, 1, 2},
                {20957, 2020, 3, 313965, 623297, 1, 41, 0, 1, 3, 1, 2},
                {22110, 2020, 3, 319611, 629088, 3, 42, 0, 1, 3, 1, 2},
                {22111, 2020, 3, 319611, 629088, 3, 43, 0, 1, 3, 1, 2},
                {22112, 2020, 3, 319611, 629088, 3, 44, 0, 1, 3, 1, 2}};

    eph_i ti = {{20957, 2020, 1, 1, 3, 1, 88, 0, 0, 90000, 10},
                {20957, 2020, 2, 1, 3, 2, 82, 0, 0, 25000, 10},
                {20957, 2020, 3, 1, 3, 2, 82, 0, 0, 25000, 10},
                {20957, 2020, 4, 1, 3, 2, 82, 0, 0, 25000, 10},
                {22866, 2020, 1, 0, 3, 1, 31, 1, 3, 59000, 10},
                {22866, 2020, 2, 1, 3, 2, 28, 1, 3, 0,     6},
                {22866, 2020, 3, 1, 3, 2, 28, 1, 3, 0,     6},
                {22866, 2020, 4, 1, 3, 2, 28, 1, 3, 0,     6},
                {22110, 2020, 1, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22110, 2020, 2, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22110, 2020, 3, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22110, 2020, 4, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22114, 2020, 1, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22114, 2020, 2, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22114, 2020, 3, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22114, 2020, 4, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22111, 2020, 1, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22111, 2020, 2, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22111, 2020, 3, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22111, 2020, 4, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22112, 2020, 1, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22112, 2020, 2, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22112, 2020, 3, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22112, 2020, 4, 0, 3, 1, 18, 0, 0, 20000, 10}
    };

    vector<pair<int, float>> esperado = {make_pair(1, 1.0),
                                         make_pair(40, 1.0),
                                         make_pair(41, 1.0),
                                         make_pair(42, 1.0),
                                         make_pair(43, 1.0),
                                         make_pair(44, 1.0)};
    vector<pair<int, float>> resultado = laCasaEstaQuedandoChica(th, ti);

    int i = 0;
    while (i < 6) {
        EXPECT_EQ(esperado[i].first, resultado[i].first);
        EXPECT_EQ(true, flotante_valido(esperado[i].second, resultado[i].second, UMBRAL));
        i++;
    }
}


/******************************************************************************
TEST 1- Caso Border.
Probemos que pasa si nadie vive en una aglomeracion de menos de S00.000 habitantes,
entonces no hay ningun hogar valido...
*******************************************************************************/
TEST(laCasaEstaQuedandoChicaTEST, NoHayHogarValido1) {

//                                            Región\ +500 /Tipo // Dormitorios
//                                                   v  v  v     v
    eph_h th = {{22114, 2020, 3, 319611, 629088, 3, 1,  1, 1, 3, 1, 2},
                {22866, 2020, 3, 317157, 627217, 2, 40, 1, 1, 2, 1, 2},
                {20957, 2020, 3, 313965, 623297, 1, 41, 1, 1, 3, 1, 2},
                {22110, 2020, 3, 319611, 629088, 3, 42, 1, 1, 3, 1, 2},
                {22111, 2020, 3, 319611, 629088, 3, 43, 1, 1, 3, 1, 2},
                {22112, 2020, 3, 319611, 629088, 3, 44, 1, 1, 3, 1, 2}};

    eph_i ti = {{20957, 2020, 1, 1, 3, 1, 88, 0, 0, 90000, 10},
                {20957, 2020, 2, 1, 3, 2, 82, 0, 0, 25000, 10},
                {20957, 2020, 3, 1, 3, 2, 82, 0, 0, 25000, 10},
                {20957, 2020, 4, 1, 3, 2, 82, 0, 0, 25000, 10},
                {22866, 2020, 1, 0, 3, 1, 31, 1, 3, 59000, 10},
                {22866, 2020, 2, 1, 3, 2, 28, 1, 3, 0,     6},
                {22866, 2020, 3, 1, 3, 2, 28, 1, 3, 0,     6},
                {22866, 2020, 4, 1, 3, 2, 28, 1, 3, 0,     6},
                {22110, 2020, 1, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22110, 2020, 2, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22110, 2020, 3, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22110, 2020, 4, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22114, 2020, 1, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22114, 2020, 2, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22114, 2020, 3, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22114, 2020, 4, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22111, 2020, 1, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22111, 2020, 2, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22111, 2020, 3, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22111, 2020, 4, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22112, 2020, 1, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22112, 2020, 2, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22112, 2020, 3, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22112, 2020, 4, 0, 3, 1, 18, 0, 0, 20000, 10}
    };

    vector<pair<int, float>> esperado = {make_pair(1, 0),
                                         make_pair(40, 0),
                                         make_pair(41, 0),
                                         make_pair(42, 0),
                                         make_pair(43, 0),
                                         make_pair(44, 0)};
    vector<pair<int, float>> resultado = laCasaEstaQuedandoChica(th, ti);

    int i = 0;
    while (i < 6) {
        EXPECT_EQ(esperado[i].first, resultado[i].first);
        EXPECT_EQ(true, flotante_valido(esperado[i].second, resultado[i].second, UMBRAL));
        i++;
    }
}

/******************************************************************************
TEST 2- Caso Border.
Probemos que pasa si nadie vive en una casa, por ende no hay HogarValido
*******************************************************************************/
TEST(laCasaEstaQuedandoChicaTEST, NoHayHogarValido2) {

//                                            Región\ +500 /Tipo // Dormitorios
//                                                   v  v  v     v
    eph_h th = {{22114, 2020, 3, 319611, 629088, 3, 1,  1, 2, 3, 1, 2},
                {22866, 2020, 3, 317157, 627217, 2, 40, 1, 2, 2, 1, 2},
                {20957, 2020, 3, 313965, 623297, 1, 41, 1, 2, 3, 1, 2},
                {22110, 2020, 3, 319611, 629088, 3, 42, 1, 2, 3, 1, 2},
                {22111, 2020, 3, 319611, 629088, 3, 43, 1, 2, 3, 1, 2},
                {22112, 2020, 3, 319611, 629088, 3, 44, 1, 2, 3, 1, 2}};

    eph_i ti = {{20957, 2020, 1, 1, 3, 1, 88, 0, 0, 90000, 10},
                {20957, 2020, 2, 1, 3, 2, 82, 0, 0, 25000, 10},
                {20957, 2020, 3, 1, 3, 2, 82, 0, 0, 25000, 10},
                {20957, 2020, 4, 1, 3, 2, 82, 0, 0, 25000, 10},
                {22866, 2020, 1, 0, 3, 1, 31, 1, 3, 59000, 10},
                {22866, 2020, 2, 1, 3, 2, 28, 1, 3, 0,     6},
                {22866, 2020, 3, 1, 3, 2, 28, 1, 3, 0,     6},
                {22866, 2020, 4, 1, 3, 2, 28, 1, 3, 0,     6},
                {22110, 2020, 1, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22110, 2020, 2, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22110, 2020, 3, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22110, 2020, 4, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22114, 2020, 1, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22114, 2020, 2, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22114, 2020, 3, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22114, 2020, 4, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22111, 2020, 1, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22111, 2020, 2, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22111, 2020, 3, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22111, 2020, 4, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22112, 2020, 1, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22112, 2020, 2, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22112, 2020, 3, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22112, 2020, 4, 0, 3, 1, 18, 0, 0, 20000, 10}
    };

    vector<pair<int, float>> esperado = {make_pair(1, 0),
                                         make_pair(40, 0),
                                         make_pair(41, 0),
                                         make_pair(42, 0),
                                         make_pair(43, 0),
                                         make_pair(44, 0)};
    vector<pair<int, float>> resultado = laCasaEstaQuedandoChica(th, ti);

    int i = 0;
    while (i < 6) {
        EXPECT_EQ(esperado[i].first, resultado[i].first);
        EXPECT_EQ(true, flotante_valido(esperado[i].second, resultado[i].second, UMBRAL));
        i++;
    }
}
/******************************************************************************
TEST 3- Caso Border.
Probemos que pasa si nadie vive en una condicion de HC,
y son todos hogares validos.
*******************************************************************************/
TEST(laCasaEstaQuedandoChicaTEST, NoHayHC) {

//                                            Región\ +500 /Tipo // Dormitorios
//                                                   v  v  v     v
    eph_h th = {{22114, 2020, 3, 319611, 629088, 3, 1,  1, 1, 3, 10, 2},
                {22866, 2020, 3, 317157, 627217, 2, 40, 1, 1, 2, 10, 2},
                {20957, 2020, 3, 313965, 623297, 1, 41, 1, 1, 3, 10, 2},
                {22110, 2020, 3, 319611, 629088, 3, 42, 1, 1, 3, 10, 2},
                {22111, 2020, 3, 319611, 629088, 3, 43, 1, 1, 3, 10, 2},
                {22112, 2020, 3, 319611, 629088, 3, 44, 1, 1, 3, 10, 2}};

    eph_i ti = {{20957, 2020, 1, 1, 3, 1, 88, 0, 0, 90000, 10},
                {20957, 2020, 2, 1, 3, 2, 82, 0, 0, 25000, 10},
                {20957, 2020, 3, 1, 3, 2, 82, 0, 0, 25000, 10},
                {20957, 2020, 4, 1, 3, 2, 82, 0, 0, 25000, 10},
                {22866, 2020, 1, 0, 3, 1, 31, 1, 3, 59000, 10},
                {22866, 2020, 2, 1, 3, 2, 28, 1, 3, 0,     6},
                {22866, 2020, 3, 1, 3, 2, 28, 1, 3, 0,     6},
                {22866, 2020, 4, 1, 3, 2, 28, 1, 3, 0,     6},
                {22110, 2020, 1, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22110, 2020, 2, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22110, 2020, 3, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22110, 2020, 4, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22114, 2020, 1, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22114, 2020, 2, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22114, 2020, 3, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22114, 2020, 4, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22111, 2020, 1, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22111, 2020, 2, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22111, 2020, 3, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22111, 2020, 4, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22112, 2020, 1, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22112, 2020, 2, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22112, 2020, 3, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22112, 2020, 4, 0, 3, 1, 18, 0, 0, 20000, 10}
    };

    vector<pair<int, float>> esperado = {make_pair(1, 0),
                                         make_pair(40, 0),
                                         make_pair(41, 0),
                                         make_pair(42, 0),
                                         make_pair(43, 0),
                                         make_pair(44, 0)};
    vector<pair<int, float>> resultado = laCasaEstaQuedandoChica(th, ti);

    int i = 0;
    while (i < 6) {
        EXPECT_EQ(esperado[i].first, resultado[i].first);
        EXPECT_EQ(true, flotante_valido(esperado[i].second, resultado[i].second, UMBRAL));
        i++;
    }
}

/******************************************************************************
TEST 3- Caso Border.
Probemos que pasa si la relacion de la proporcion de la cantidad de hogares
con HC con los totales da algun float.
*******************************************************************************/
TEST(laCasaEstaQuedandoChicaTEST, FuncionaElFloat) {

//                                            Región\ +500 /Tipo // Dormitorios
//                                                   v  v  v     v
    eph_h th = {{22114, 2020, 3, 319611, 629088, 3, 1,  0, 1, 3,  1,  2},   //Unico valido, sea HC
                {22866, 2020, 3, 317157, 627217, 2, 1,  0, 1, 12, 10, 2},    //Unico valido, no sea HC
                {20957, 2020, 3, 313965, 623297, 1, 41, 1, 2, 3,  10, 2},
                {22110, 2020, 3, 319611, 629088, 3, 42, 1, 2, 3,  10, 2},
                {22111, 2020, 3, 319611, 629088, 3, 43, 1, 2, 3,  10, 2},
                {22112, 2020, 3, 319611, 629088, 3, 44, 1, 2, 3,  10, 2}};

    eph_i ti = {{20957, 2020, 1, 1, 3, 1, 88, 0, 0, 90000, 10},
                {20957, 2020, 2, 1, 3, 2, 82, 0, 0, 25000, 10},
                {20957, 2020, 3, 1, 3, 2, 82, 0, 0, 25000, 10},
                {20957, 2020, 4, 1, 3, 2, 82, 0, 0, 25000, 10},
                {22866, 2020, 1, 0, 3, 1, 31, 1, 3, 59000, 10},   //Cant de habitantes 4
                {22866, 2020, 2, 1, 3, 2, 28, 1, 3, 0,     6},
                {22866, 2020, 3, 1, 3, 2, 28, 1, 3, 0,     6},
                {22866, 2020, 4, 1, 3, 2, 28, 1, 3, 0,     6},
                {22110, 2020, 1, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22110, 2020, 2, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22110, 2020, 3, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22110, 2020, 4, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22114, 2020, 1, 0, 3, 1, 18, 0, 0, 20000, 10},    //Cant de habitantes 4
                {22114, 2020, 2, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22114, 2020, 3, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22114, 2020, 4, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22111, 2020, 1, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22111, 2020, 2, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22111, 2020, 3, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22111, 2020, 4, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22112, 2020, 1, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22112, 2020, 2, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22112, 2020, 3, 0, 3, 1, 18, 0, 0, 20000, 10},
                {22112, 2020, 4, 0, 3, 1, 18, 0, 0, 20000, 10}
    };

    vector<pair<int, float>> esperado = {make_pair(1, 0.5),
                                         make_pair(40, 0),
                                         make_pair(41, 0),
                                         make_pair(42, 0),
                                         make_pair(43, 0),
                                         make_pair(44, 0)};
    vector<pair<int, float>> resultado = laCasaEstaQuedandoChica(th, ti);

    int i = 0;
    while (i < 6) {
        EXPECT_EQ(esperado[i].first, resultado[i].first);
        EXPECT_EQ(true, flotante_valido(esperado[i].second, resultado[i].second, UMBRAL));
        i++;
    }
}